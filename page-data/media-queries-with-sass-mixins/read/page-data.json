{"componentChunkName":"component---node-modules-gatsby-theme-blog-src-templates-post-js","path":"/media-queries-with-sass-mixins/read","webpackCompilationHash":"1934dc695baf07d235aa","result":{"data":{"post":{"id":"aeca6577-97ec-585d-9918-9f23d861928f","title":"Media Queries with SASS mixins","date":"September 10, 2019","excerpt":"Mixins allow you to define styles that can be re-used throughout your stylesheet.They make it easy to\navoid using non-semantic classes like…","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Media Queries with SASS mixins\",\n  \"date\": \"2019-09-10T00:00:00.000Z\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Mixins allow you to define styles that can be re-used throughout your stylesheet.They make it easy to\\navoid using non-semantic classes like .float-left, and to distribute collections of styles in libraries.\\nMixins are defined using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@mixin\"), \" at-rule, which is written \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@mixin <name> { ... }\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@mixin name(<arguments...>) { ... }\"), \".\\nThey can be used to encapsulate styles that can be dropped into a single style rule; they can contain style rules of their own\\nthat can be nested in other rules or included at the top level of the stylesheet; or they can just serve to modify variables.\"), mdx(\"p\", null, \"Mixins are included into the current context using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@include\"), \" at-rule, which is written \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@include <name>\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@include <name>(<arguments...>)\"), \",\\nwith the name of the mixin being included.\"), mdx(\"h3\", {\n    \"id\": \"example-with-no-arguments\"\n  }, \"Example with no arguments\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-scss\"\n  }), \"// Style in Scss\\n\\n@mixin styled-text {\\n  text-align: center;\\n  font-weight: 500;\\n}\\n\\n.article {\\n  @include styled-text;\\n  .header {\\n    @include styled-text;\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-css\"\n  }), \"// Resulting css\\n\\n.article {\\n  text-align: center;\\n  font-weight: 500;\\n}\\n\\n.article .header {\\n  text-align: center;\\n  font-weight: 500;\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"example-with-arguments\"\n  }, \"Example with arguments\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-scss\"\n  }), \"// Style in Scss\\n\\n@mixin size($width: 50px, $height: 50px) {\\n  width: $width;\\n  height: $height;\\n}\\n\\n.box {\\n  @include size(100px, 100px);\\n}\\n\\n.bigger-box {\\n  @include size(400px, 300px);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-css\"\n  }), \"// Resulting css\\n\\n.box {\\n  width: 100px;\\n  height: 100px;\\n}\\n\\n.bigger-box {\\n  width: 400px;\\n  height: 300px;\\n}\\n\")), mdx(\"p\", null, \"Mixins can be really cool. They can be taken advantage to make writing of Media queries across your app easier.\\nMedia queries can be alot, especially when trying to write queries for different devices and screen sizes.\\nI will show you how to make this a bit easier with mixins. Take this example below.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-scss\"\n  }), \".box {\\n  width: 400px;\\n}\\n\\n.special-box {\\n  color: red;\\n}\\n\\n@media (max-width: 720px) {\\n  .box {\\n    width: 100px;\\n  }\\n  .special-box {\\n    color: blue;\\n  }\\n}\\n\\n@media (min-width: 1440px) {\\n  .box {\\n    width: 500px;\\n  }\\n}\\n\")), mdx(\"p\", null, \"This might not look so bad, but can become a pain as your styles become larger. It becomes less easy to relate selectors with thier corresponding\\nstyles on in a media query, or the queries can be written under or with each style to improve readability. A mixin can be used to make this easier.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-scss\"\n  }), \"@mixin mobile {\\n  @media (max-width: 720px) {\\n    @content;\\n  }\\n}\\n\\n@mixin desktop {\\n  @media (min-width: 1440px) {\\n    @content;\\n  }\\n}\\n\\n.box {\\n  width: 400px;\\n  @include mobile {\\n    width: 100px;\\n  }\\n  @include desktop {\\n    width: 500px;\\n  }\\n}\\n\\n.bigger-box {\\n  color: red;\\n  @include desktop {\\n    color: blue;\\n  }\\n}\\n\")), mdx(\"p\", null, \"This helps to improve readability and also writing as the media query is now some sort of short hand.\"), mdx(\"h3\", {\n    \"id\": \"note\"\n  }, \"Note\"), mdx(\"p\", null, \"This might not be ideal if you want to seperate your media queries to different files to maybe to load them on different screen sizes.\"), mdx(\"h4\", {\n    \"id\": \"example\"\n  }, \"Example\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<link\\n  rel=\\\"stylesheet\\\"\\n  media=\\\"screen and (min-device-width: 800px)\\\"\\n  href=\\\"800.css\\\"\\n/>\\n\")), mdx(\"p\", null, \"But it is possible to find a work around which will still involve using mixins.\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"site":{"siteMetadata":{"title":"Dev Designer Blog"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"aeca6577-97ec-585d-9918-9f23d861928f","excerpt":"Mixins allow you to define styles that can be re-used throughout your stylesheet.They make it easy to\navoid using non-semantic classes like…","slug":"/media-queries-with-sass-mixins/read","title":"Media Queries with SASS mixins","date":"September 10, 2019","siteTitle":"Dev Designer Blog","socialLinks":[{"name":"Portfolio","url":"https://johnayeni.github.io/portfolio/"},{"name":"Twitter","url":"https://twitter.com/johnayeni_"},{"name":"Github","url":"https://github.com/johnayeni"}],"previous":{"node":{"id":"48639822-01c3-5e4b-bbad-3c8bae1b465f","excerpt":"Hooks  are a new addition in React 16.8. They let you use state and other React features without writing a class. useReducer useReducer  is…","slug":"/custom-react-hooks-use-persisted-reducer/read","title":"Custom React Hooks - Use Persisted Reducer","date":"September 03, 2019"}},"next":{"node":{"id":"d906ee24-c685-50a1-b38a-357b98fca075","excerpt":"The default way of importing files or modules which are not from  node_modules  is the usage of  Relative Imports . Take for example we have…","slug":"/absolute-imports-with-create-react-app/read","title":"Absolute imports with Create React App","date":"October 28, 2019"}}}}}