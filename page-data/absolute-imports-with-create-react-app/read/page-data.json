{"componentChunkName":"component---node-modules-gatsby-theme-blog-src-templates-post-js","path":"/absolute-imports-with-create-react-app/read","webpackCompilationHash":"1934dc695baf07d235aa","result":{"data":{"post":{"id":"d906ee24-c685-50a1-b38a-357b98fca075","title":"Absolute imports with Create React App","date":"October 28, 2019","excerpt":"The default way of importing files or modules which are not from  node_modules  is the usage of  Relative Imports . Take for example we have…","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Absolute imports with Create React App\",\n  \"date\": \"2019-10-28T00:00:00.000Z\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The default way of importing files or modules which are not from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"node_modules\"), \" is the usage of \", mdx(\"b\", null, \"Relative Imports\"), \".\"), mdx(\"p\", null, \"Take for example we have a directory structure like this.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"|-- public\\n|-- src\\n|  |-- components\\n|  |  |--PictureComponent.js\\n|  |-- pages\\n|  |   |-- MainPage.js\\n|  |--index.js\\n|-- package.json\\n|-- package-lock.json\\n\")), mdx(\"p\", null, \"We need to import the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PictureComponent\"), \" in our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MainPage\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"//example of a relative import\\nimport PictureComponent from \\\"../components/PictureComponent\\\";\\n\")), mdx(\"p\", null, \"This is totally fine, until your project becomes very large and some files are several levels deep. It becomes harder to import and trace\\nfiles and modules from other directories in the project.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"// imagine having to import a file like this\\nimport CustomHeader from \\\"../../../../../compoents/CustomHeader\\\";\\n\")), mdx(\"h3\", {\n    \"id\": \"using-absolute-imports\"\n  }, \"Using Absolute Imports\"), mdx(\"p\", null, \"Absolute imports helps with importing files from a common source. In most cases, most files you would need would be in your source (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src\"), \") directory.\\nWith Absolute Imports, you can write your file paths, already assuming you are at the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src\"), \" directory.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// example of an absolute import\\nimport PictureComponent from \\\"components/PictureComponent\\\";\\n\")), mdx(\"p\", null, \"This import will work from any \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"js\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jsx\"), \" file, no matter where they are in the project directory. To set this up create a file called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jsconfig.json\"), \" in\\nthe project root folder. And add the configuration below. If you are using typescript, you should add the configuration to your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"tsconfig.json\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n  \\\"compilerOptions\\\": {\\n    \\\"baseUrl\\\": \\\"src\\\"\\n  }\\n}\\n\")), mdx(\"p\", null, \"This will help VSCode and other IDE to resolve path in TypeScript & JavaScript and ofcourse, if there are cases where you need to still use a relative import if it\\u2019s more\\nsensible, it will still work.\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"site":{"siteMetadata":{"title":"Dev Designer Blog"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"d906ee24-c685-50a1-b38a-357b98fca075","excerpt":"The default way of importing files or modules which are not from  node_modules  is the usage of  Relative Imports . Take for example we have…","slug":"/absolute-imports-with-create-react-app/read","title":"Absolute imports with Create React App","date":"October 28, 2019","siteTitle":"Dev Designer Blog","socialLinks":[{"name":"Portfolio","url":"https://johnayeni.github.io/portfolio/"},{"name":"Twitter","url":"https://twitter.com/johnayeni_"},{"name":"Github","url":"https://github.com/johnayeni"}],"previous":{"node":{"id":"aeca6577-97ec-585d-9918-9f23d861928f","excerpt":"Mixins allow you to define styles that can be re-used throughout your stylesheet.They make it easy to\navoid using non-semantic classes like…","slug":"/media-queries-with-sass-mixins/read","title":"Media Queries with SASS mixins","date":"September 10, 2019"}},"next":null}}}